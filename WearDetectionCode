from google.colab import files
print("Upload all test images:")
uploaded = files.upload()
# Install Generative AI SDK.
!pip install -q -U google-generativeai
import re
from PIL import Image
import cv2
import numpy as np
from datetime import datetime
from IPython.display import display

# Authenticate API
API_KEY = userdata.get('NikKey')
genai.configure(api_key=API_KEY)

model = genai.GenerativeModel(model_name='gemini-1.5-pro')

# Test case setup with specific reference images per scenario
TEST_CASES = [
    {
        "name": "Unopened (Valid)",
        "serial_number": "JKL012",
        "purchase_date": "2024-01-01",
        "arrival_date": "2024-01-05",
        "complaint_date": "2024-01-20",
        "return_type": "2",
        "reference_image": "unopened_reference.jpg",
        "test_image": "unopened_test.jpg",
        "tag_image": "tag_image_valid.jpg"
    },
    {
        "name": "Unused but Opened (Valid)",
        "serial_number": "MNO345",
        "purchase_date": "2024-01-01",
        "arrival_date": "2024-01-05",
        "complaint_date": "2024-01-15",
        "return_type": "3",
        "reference_image": "opened_reference.jpg",
        "test_image": "opened_test.jpg",
        "tag_image": "tag_image_valid.jpg"
    },
    {
        "name": "Defective on Arrival (Valid)",
        "serial_number": "GHI789",
        "purchase_date": "2024-01-01",
        "arrival_date": "2024-01-05",
        "complaint_date": "2024-01-06",
        "return_type": "1",
        "reference_image": "perfect_reference.jpg",
        "test_image": "defective_image.jpg",
        "tag_image": "tag_image_valid.jpg"
    },
    {
        "name": "Lightly Used (Denied)",
        "serial_number": "PQR678",
        "purchase_date": "2024-01-01",
        "arrival_date": "2024-01-05",
        "complaint_date": "2024-01-10",
        "return_type": "4",
        "reference_image": "perfect_reference.jpg",
        "test_image": "used_image.jpg",
        "tag_image": "tag_image_valid.jpg"
    },
    {
        "name": "Final Sale Item",
        "serial_number": "ABC123",
        "purchase_date": "2024-01-01",
        "arrival_date": "2024-01-05",
        "complaint_date": "2024-01-06",
        "return_type": "2",
        "reference_image": "unopened_reference.jpg",
        "test_image": "unopened_test.jpg",
        "tag_image": "tag_image.jpg"
    }
]

for test in TEST_CASES:
    print(f"\nRunning Test Case: {test['name']}")
    serial_number = test['serial_number']
    if serial_number in ['ABC123', 'DEF456']:
        print("❌ This item is FINAL SALE. No returns allowed.")
        continue

    purchase_date = datetime.strptime(test['purchase_date'], '%Y-%m-%d')
    arrival_date = datetime.strptime(test['arrival_date'], '%Y-%m-%d')
    complaint_date = datetime.strptime(test['complaint_date'], '%Y-%m-%d')
    return_type = test['return_type']

    reference_img = Image.open(test['reference_image'])
    test_img = Image.open(test['test_image'])

    response = model.generate_content([
        reference_img,
        test_img,
        "Compare these images to identify defects. If no defects are found, reply 'NO DEFECTS FOUND'."
    ])
    result = response.text.strip()
    print(f"Gemini result: {result}")

    days_since_arrival = (complaint_date - arrival_date).days

    if return_type == '1':
        if days_since_arrival > 2:
            print("❌ Return denied: Defective returns must be reported within 1-2 days.")
        elif "NO DEFECTS FOUND" in result.upper():
            print("❌ Return denied: No defects detected.")
        else:
            print("✅ Return approved: Defective on arrival.")
            print("🔄 Vendor Action: Send item to RECYCLING due to confirmed defects.")

    elif return_type == '2':
        if days_since_arrival > 30:
            print("❌ Return denied: Unopened returns must be within 30 days.")
        elif "NO DEFECTS FOUND" not in result.upper():
            print("❌ Return denied: Product shows signs of use or defects.")
        else:
            print("✅ Return approved: Unopened product.")
            print("🔄 Vendor Action: Place item back into INVENTORY as new.")

    elif return_type == '3':
        if days_since_arrival > 15:
            print("❌ Return denied: Opened returns must be within 15 days.")
        elif "NO DEFECTS FOUND" not in result.upper():
            print("❌ Return denied: Product shows defects, not eligible.")
        else:
            print("✅ Return approved: Opened but unused.")
            print("🔄 Vendor Action: Repackage and place item back into INVENTORY.")

    elif return_type == '4':
        print("✅ Return approved")
        print("🔄 Vendor Action: List item for resale on EBAY as used condition. (Charge user?)")

    elif return_type == '5':
        print("✅ Return Approved: Used and damaged items are eligible for return.(Charge user?)")
        print("🔄 Vendor Action: Send item to RECYCLING due to excessive wear.")

    else:
        print("❌ Invalid return type selected.")
