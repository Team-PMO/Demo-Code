# Install Generative AI SDK and required libraries
!pip install -q -U google-generativeai

from google.colab import files, userdata
from PIL import Image
import numpy as np
from IPython.display import display
import google.generativeai as genai

# Authenticate Gemini API
API_KEY = userdata.get('NikKey')
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel(model_name='gemini-1.5-pro')

# Sample product description from original vendor
VENDOR_DESCRIPTION = "Premium White Cotton T-Shirt made from 100% organic cotton. Features a classic fit, durable stitching, and a soft-touch finish."

# Stand-in eBay sales data
EBAY_SALES_DATA = {
    'Like New': [25.00, 27.50, 30.00, 28.00, 26.00],
    'Slightly Used': [18.00, 20.00, 22.50, 19.00, 21.00],
    'Used': [12.00, 14.00, 13.50, 15.00, 11.00],
    'Heavily Used': [5.00, 7.00, 6.50, 5.50, 4.00]
}

# Upload reference (new) and used product images
print("Upload the REFERENCE (perfect) image:")
ref_upload = files.upload()
reference_image_name = list(ref_upload.keys())[0]
reference_img = Image.open(reference_image_name)

print("Upload the USED product image:")
used_upload = files.upload()
used_image_name = list(used_upload.keys())[0]
used_img = Image.open(used_image_name)

# Step 1: Check if images are identical
if np.array_equal(np.array(reference_img), np.array(used_img)):
    condition_rating = "Like New"
    print(f"🔎 Condition Rating: {condition_rating} (Images are identical)")
else:
    rating_response = model.generate_content([
        reference_img,
        used_img,
        "Compare these two images. Based on visible wear, assign a condition rating of either: 'Like New', 'Slightly Used', 'Used', or 'Heavily Used'."
    ])
    condition_rating = rating_response.text.strip()
    print(f"🔎 Condition Rating: {condition_rating}")

# Step 2: Generate eBay description
ebay_description_response = model.generate_content([
    VENDOR_DESCRIPTION,
    f"Create an engaging eBay listing description for a product in '{condition_rating}' condition based on this vendor description. Highlight its features, current condition, and appeal to buyers."
])
eb_description = ebay_description_response.text.strip()
print(f"📝 eBay Listing Description:\n{eb_description}")

# Step 3: Calculate average price from stand-in data
def get_average_stand_in_price(condition):
    prices = EBAY_SALES_DATA.get(condition, [])
    if prices:
        average_price = sum(prices) / len(prices)
        print(f"💰 Average price from recent sales (stand-in data): ${average_price:.2f}")
        return average_price
    else:
        print("❌ No price data available for this condition.")
        return None

average_price = get_average_stand_in_price(condition_rating)
if average_price:
    print(f"🔖 Suggested listing price: ${average_price:.2f}")
else:
    print("❌ Unable to determine suggested price.")
